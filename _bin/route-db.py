import rcr
import csv
import os

FIELDS = ['id', 'name', 'start', 'dist', 'elev', 'end', 'type', 'map', 'deprecated']
TYPES = ['Loop', 'P2P', 'OB']
LOCS = [
    'Alki',
    'Beacon',
    'BellDtwn',
    'CapHill',
    'CID',
    'ColCity',
    'ColmanPark',
    'CSE',
    'GasWorks',
    'GreenLake',
    'JaysCafe',
    'Locks',
    'MadronaPark',
    'Magnuson',
    'Marymoor',
    'MerSlough',
    'Miller',
    'MtBaker',
    'Northgate',
    'PacPav',
    'RedTech',
    'Roosevelt',
    'Seward',
    'SoBell',
    'SoDisco',
    'SODO',
    'WashPark',
    'Westlake',
    'WoodCafe'
]

warnings = False
def warn(msg):
    global warnings
    warnings = True
    print(f"WARNING! {msg}")

def warn_rc(route, msg):
    warn(f"route {route['id']}: {msg}")

def check_route(route):
    # all fields set
    for field in FIELDS:
        if field not in route:
            warn_rc(route, f"missing '{field}' field")
        elif field != 'deprecated' and route[field].strip() == '':
            warn_rc(route, f"blank '{field}' field")

    # valid type
    if route['type'] not in TYPES:
        warn_rc(route, f"invalid type '{route['type']}'")

    # check id and name conventions for type
    if route['type'] == 'Loop':
        if not route['id'].endswith('-loop'):
            warn_rc(route, f"Loop route ids should end with '-loop'")
        if not route['name'].endswith(' Loop'):
            warn_rc(route, f"Loop route name should end with ' Loop'")
    if route['type'] == 'OB':
        if not route['id'].endswith('-ob'):
            warn_rc(route, f"OB route ids should end with '-ob'")
        if not route['name'].startswith('OB: '):
            warn_rc(route, f"OB route name should start with 'OB: '")

    # check start and end wrt to type
    if route['type'] in ['Loop', 'OB']:
        if route['start'] != route['end']:
            warn_rc(route, f"start and end must match for a {route['type']} route")
    if route['type'] == 'P2P':
        if route['start'] == route['end']:
            warn_rc(route, f"start and end must differ for P2P route")

    # valid start and end locations
    if route['start'] not in LOCS:
        warn_rc(route, f"invalid start '{route['start']}'")
    if route['end'] not in LOCS:
        warn_rc(route, f"invalid end '{route['end']}'")

    # valid dist and elev
    try:
        assert 0 < float(route['dist'])
    except:
        warn_rc(route, f"invalid dist '{route['dist']}'")
    try:
        assert 0 < float(route['elev'])
    except:
        warn_rc(route, f"invalid elev '{route['elev']}'")

    # valid deprecation
    if route['deprecated'] not in ['', 'true']:
        warn_rc(route, f"invalid deprecated status '{route['deprecated']}'")

    # every route has a gpx
    gpx_path = os.path.join(rcr.ROUTES_GPX, route['id']) + '.gpx'
    if not os.path.isfile(gpx_path):
        warn_rc(route, f"no GPX file at '{gpx_path}'")

def main():
    routes = rcr.load_route_db()

    # ensure all route ids unique
    ids = set()
    for route in routes:
        if route['id'] in ids:
            warn(f"route {route['id']} is not unique")
        ids.add(route['id'])

    # check each route
    for route in routes:
        check_route(route)

    if warnings:
        print("Exiting due to warnings - please fix and re-run.")
        exit(1)

    # sort routes by start and increasing distance
    routes.sort(key=lambda x: (x['start'].lower(), float(x['dist']), x['end'], x['type'], x['id']))

    # write sorted routes back
    with open(rcr.ROUTE_DB, 'w') as f:
        writer = csv.DictWriter(f, fieldnames=FIELDS, dialect='unix')
        writer.writeheader()
        for route in routes:
            writer.writerow(route)

    # output yaml version to _data dir
    yml_path = os.path.join(rcr.DATA, 'routes.yml')
    with open(yml_path, 'w') as f:
        f.write('# AUTOGENERATED - DO NOT EDIT\n\n')
        for route in routes:
            f.write(f"- id: {route['id']}\n")
            f.write(f"  name: \"{route['name']}\"\n")
            f.write(f"  start: \"{route['start']}\"\n")
            f.write(f"  dist: {route['dist']}\n")
            f.write(f"  elev: {route['elev']}\n")
            f.write(f"  end: \"{route['end']}\"\n")
            f.write(f"  type: \"{route['type']}\"\n")
            f.write(f"  map: \"{route['map']}\"\n")
            if route['deprecated']:
                f.write(f"  deprecated: true\n")
            f.write('\n')

if __name__ == '__main__':
    main()
